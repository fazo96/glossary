/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.Properties;
import main.Client;
import util.FileUtil;
import util.GUIUtil;
import util.SettingsParser;

/**
 *
 * @author Gian
 */
public class Settings extends javax.swing.JFrame {

    private String path = "settings.txt";
    private Properties settings;
    private boolean firstTime;

    /**
     * Creates new form Settings
     */
    public Settings() {
        initComponents();
        this.setLocationRelativeTo(null);
        settings = new Properties();
        resetDefaults();
        if (!load()) {
            // No settings? then it's the first time the user uses the Glossary
            firstTime = true;
            GUIUtil.tell("Welcome to Glossary.\nIf you need any help,"
                    + " the User Manual is available in"
                    + " 'File' -> 'User Manual'");
        } else {
            firstTime = false;
            apply();
        }
    }

    /**
     * Resets default settings
     */
    public void resetDefaults() {
        settings.setProperty("address", "localhost");
        settings.setProperty("port", "4000");
        apply();
    }

    /**
     * Applies the settings to the components of the client
     */
    public void apply() {
        Client.get().getConnection().setAddress(settings.getProperty("address"));
        int port = Integer.parseInt(settings.getProperty("port"));
        Client.get().getConnection().setPort(port);
        Client.get().getAdHocServer().setPort(port);
        // Apply to GUI:
        ipText.setText(settings.getProperty("address"));
        portText.setText("" + port);
    }

    public boolean load() {
        Properties p = SettingsParser.parseFile(path, settings);
        if (p != null) {
            settings = p;
        }
        return p != null;
    }

    public boolean save() {
        return SettingsParser.write(path, settings);
    }

    public Properties getSettingsStore() {
        return settings;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ipLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        ipText = new javax.swing.JTextField();
        portText = new javax.swing.JTextField();
        bReset = new javax.swing.JButton();
        bSave = new javax.swing.JButton();

        setTitle("Settings");
        setMaximumSize(new java.awt.Dimension(220, 150));
        setMinimumSize(new java.awt.Dimension(220, 150));
        setResizable(false);

        jPanel1.setMaximumSize(new java.awt.Dimension(200, 150));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(220, 150));

        ipLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ipLabel.setText("IP address");

        portLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        portLabel.setText("Port");

        ipText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipTextActionPerformed(evt);
            }
        });

        portText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextActionPerformed(evt);
            }
        });

        bReset.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bReset.setText("Reset");
        bReset.setMaximumSize(new java.awt.Dimension(65, 23));
        bReset.setMinimumSize(new java.awt.Dimension(65, 23));
        bReset.setPreferredSize(new java.awt.Dimension(65, 23));
        bReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResetActionPerformed(evt);
            }
        });

        bSave.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        bSave.setText("Save");
        bSave.setMaximumSize(new java.awt.Dimension(65, 23));
        bSave.setMinimumSize(new java.awt.Dimension(65, 23));
        bSave.setPreferredSize(new java.awt.Dimension(65, 23));
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(bReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(bSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(portLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ipLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipText)
                            .addComponent(portText))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipLabel)
                    .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ipTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipTextActionPerformed
        bSaveActionPerformed(evt);
    }//GEN-LAST:event_ipTextActionPerformed

    private void bResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResetActionPerformed
        ipText.setText("localhost");
        portText.setText("4000");
    }//GEN-LAST:event_bResetActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        String address = ipText.getText();
        int port;
        try {
            port = Integer.parseInt(portText.getText());
            if (port > 65535 || port < 0) {
                throw new NumberFormatException("Invalid port number");
            }
        } catch (NumberFormatException e) {
            // Port invalid
            GUIUtil.tellError("Port number invalid");
            return;
        }
        settings.setProperty("address", address);
        settings.setProperty("port", ""+port);
        apply();
        if (save()) {
            GUIUtil.tell("Settings saved successfully");
            this.setVisible(false);
        } else {
            GUIUtil.tellError("Failed to save Settings");
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void portTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextActionPerformed
        bSaveActionPerformed(evt);
    }//GEN-LAST:event_portTextActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bReset;
    private javax.swing.JButton bSave;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JTextField ipText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portText;
    // End of variables declaration//GEN-END:variables
}
